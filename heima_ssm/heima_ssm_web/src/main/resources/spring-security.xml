<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd">
    <!-- 配置不过滤的资源（静态资源及登录相关）
     -->
    <security:http security="none" pattern="/login.jsp" />
    <security:http security="none" pattern="/failer.jsp" />
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>

    <!--auto-config: 这个是一个自动配置过滤器(Filter)的属性, 设置为true，security框架帮我创建login页面，login处理方法
        use-expressions:"是否使用spring 的el表达式"，如果使用表达式true：access="hasRole('ROLE_USER')"
    -->
    <security:http auto-config="true" use-expressions="false">
        <!-- 配置拦截的请求地址，
        pattern=/**代表拦截所有请求，
        access=ROLE_USER，即访问的用户必须有ROLE_USER的角色才可访问
        ROLE_USER写法，ROLE_自定义,须以ROLE_为前缀, 多个以逗号分割,或者 -->
        <security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN" />
        <!-- 自定义登陆页面，
		login-page 自定义登陆页面 
		authentication-failure-url 用户权限校验失败之后才会跳转到这个页面，如果数据库中没有这个用户则不会跳转到这个页面。
        default-target-url 登陆成功后跳转的页面。 注：登陆页面用户名固定 username，密码 password，action:login -->
        <security:form-login login-page="/login.jsp"
             login-processing-url="/login" authentication-failure-url="/failer.jsp"
             default-target-url="/index.jsp" authentication-success-forward-url="/pages/main.jsp"

        />


        <!-- 关闭CSRF,默认是开启的 -->
        <security:csrf disabled="true" />
        <security:logout invalidate-session="true" logout-url="/logout" logout-success-url="/login.jsp" />
    </security:http>


    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!-- 配置加密的方式-->
         <!--   <security:password-encoder ref="passwordEncoder"/>-->
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans>